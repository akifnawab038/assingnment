{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a9dfcafa-3768-44a5-873e-9dbd75e8873e",
   "metadata": {},
   "source": [
    "# Assignment:\n",
    "## Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e65e511b-0114-46a8-8ffe-b0dab5923be0",
   "metadata": {},
   "source": [
    "### 1. Explain the key features of Python that make it a popular choice for programming:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ce0ee0a-8698-4fb4-8268-c85328fd6321",
   "metadata": {},
   "source": [
    "- Simple and Readable Syntax:\n",
    "Python's syntax is clear and easy to read, which makes it accessible to beginners and allows experienced programmers to write code efficiently. The use of indentation to define code blocks enhances readability and reduces the chances of errors.\n",
    "\n",
    "- Versatility:\n",
    "\n",
    "Python is a general-purpose language, meaning it can be used for a wide range of applications, from web development and data analysis to machine learning and automation. Its versatility is one of the reasons it's so widely adopted.\n",
    "\n",
    "- Large Standard Library:\n",
    "Python comes with a comprehensive standard library that provides modules and functions for various tasks, such as file handling, regular expressions, and even internet protocols. This reduces the need to write code from scratch for common tasks.\n",
    "\n",
    "- Extensive Ecosystem of Third-Party Libraries:\n",
    "Beyond the standard library, Python has a vast ecosystem of third-party libraries and frameworks, such as NumPy, Pandas, TensorFlow, Django, and Flask. These libraries extend Python's capabilities and allow developers to work more efficiently in specialized areas.\n",
    "\n",
    "- Cross-Platform Compatibility:\n",
    "Python is platform-independent, meaning that Python code can run on various operating systems like Windows, macOS, and Linux without modification. This makes it easier to develop and deploy applications across different environments.\n",
    "\n",
    "- Dynamic Typing:\n",
    "Python uses dynamic typing, meaning that the type of a variable is determined at runtime, which allows for more flexibility in writing code. Developers don't need to declare variable types explicitly, which can speed up the development process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "057e1c89-ca6e-471b-af32-eafeb2b9541d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6916e0cc-1495-4d53-b992-0ae4efd00a31",
   "metadata": {},
   "source": [
    "### 2. Describe the role of predefined keywords in Python and provide examples of how they are used in a program"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "395fb263-c6a0-4cfe-ab90-f950e85440d6",
   "metadata": {},
   "source": [
    "- predefined keywords in python are reserved words that have special meaning and cannot be used for any other purpose. They help in defining the structure and syntax of the python language. examples:\n",
    "\n",
    "- if, elif, else: Used for conditional statements.\n",
    "\n",
    "- for, while: used for loops.\n",
    "\n",
    "- True, False\n",
    "\n",
    "- break, continue. etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d20c3f95-3a18-439a-8054-4ab8457f9cb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "both are equal\n"
     ]
    }
   ],
   "source": [
    "#example for predefined keywords\n",
    "a = 50\n",
    "b = 50\n",
    "if a < b:\n",
    "    print(\"b is greater than a\")\n",
    "elif a > b:\n",
    "    print(\"a is greater than b\")\n",
    "else:\n",
    "    print(\"both are equal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e1994ae-9334-436d-b66d-744cb45677a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#example for True, False:\n",
    "a == b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43a78df0-b149-46db-a0dd-3816b8617b0c",
   "metadata": {},
   "source": [
    "### 3.Mutable and immutable objects."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54455b17-9172-4dd8-a749-4770ab7a202f",
   "metadata": {},
   "source": [
    "- Mutable objects: Objects that can be changed after their creation.\n",
    "- immutable objects: Objects that can be changed once they are created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0c20074d-2974-42bd-b73c-cbcd7055fb56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 2, 3, 3.5, 'akif', True]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#example for mutable objects:\n",
    "c = [ 1, 2, 3, 3.5, \"akif\", True]\n",
    "c[0] = 4\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "31e79f87-6215-4ef2-b652-f082f93f1cb8",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'W' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[5], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#example for immutable objects:\u001b[39;00m\n\u001b[1;32m      2\u001b[0m d \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMD AKIF NAWAB\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m----> 3\u001b[0m d[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mW\u001b[49m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'W' is not defined"
     ]
    }
   ],
   "source": [
    "#example for immutable objects:\n",
    "d = \"MD AKIF NAWAB\"\n",
    "d[0] = W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ce94929-e164-40ca-938f-6e6117bdd8c7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f7d79e36-272c-4d0c-a5bf-68b5d72b9aab",
   "metadata": {},
   "source": [
    "### 4. Discuss the different types of operators in Python and provide examples of howthey are used.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cf92eab-2274-4a83-b0da-5870570e18bb",
   "metadata": {},
   "source": [
    "- In Python, operators are special symbols or keywords used to perform operations on variables and values. They are the foundation of most operations you perform in your code, ranging from simple arithmetic to more complex logic and manipulation.\n",
    "\n",
    "- Arithmetic Operators: '+', '-', '*', '/', '%', '**', '//'\n",
    "\n",
    "- Comparison Operators: '==', '!=', '>', '<', '>=', '<='\n",
    "\n",
    "- Logical Operators: 'and', 'or', 'not'\n",
    "\n",
    "- Bitwise Operators: '&', '|', '^', '~', '<<', '>>'\n",
    "\n",
    "- Assignment Operators: '=', '+=', '-=', '*=', '/=', '%=', '**=', '//='\n",
    "\n",
    "- Identity Operators: 'is', 'is not'\n",
    "\n",
    "- Membership Operators: 'in', 'not in'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "81ea710f-1c04-4eb3-9a0f-3612d3d66bdb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# example for arithemetic operators:\n",
    "e = 5\n",
    "f = 10\n",
    "print(e+f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d14d4855-9851-4a80-a8f4-737c2ed8588b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "True or False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "659114b0-d218-419d-a89f-bbcfb33e9119",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "# example for logical operator:\n",
    "print(True|False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6ad95a4b-4348-43ef-88a9-5415a124b72e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "#example for assignment operator:\n",
    "x = 5\n",
    "x+=5\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80d8e0f7-6293-404f-ada0-d9a7176f2930",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e3b88640-c16e-42f9-aea9-4fe606dc19b1",
   "metadata": {},
   "source": [
    "### 5. type casting in python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6677073-997c-4337-94f4-468df6d74f7a",
   "metadata": {},
   "source": [
    "- Type casting in Python refers to the process of converting a variable from one data type to another. It allows you to change the type of data stored in a variable to suit the needs of a particular operation or function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e05d797d-48d3-46dd-abce-ca5108bf1a74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#int to string:\n",
    "num = 10\n",
    "num = str(num)\n",
    "print(num)\n",
    "type(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6807d8a8-1912-4cf1-9ad1-145476a7102e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#string to int:\n",
    "name = \"9\"\n",
    "name = int(name)\n",
    "print(name)\n",
    "type(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18e73c82-8268-44da-9189-24ceaf437a6a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "94f33233-9661-40a4-ae32-17182a07befd",
   "metadata": {},
   "source": [
    "### 6. Conditional Statements in Python:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65d89276-80a5-4683-8266-8defecaf2fe4",
   "metadata": {},
   "source": [
    "- Conditional statements in Python allow you to execute specific blocks of code depending on whether certain conditions are met. These statements control the flow of execution in a program by using conditions that evaluate to either True or False. Key Conditional Statements.\n",
    "1. 'if' Statement\n",
    "2. 'elif' (else if) Statement\n",
    "3. 'else' Statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4d7d50e0-4374-433c-b9ac-4c2bbcc583a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i will stay in home\n"
     ]
    }
   ],
   "source": [
    "#example for conditional statement:\n",
    "weather = \"cool\"\n",
    "if weather == \"rainy\":\n",
    "    print(\"i will not go to ground\")\n",
    "elif weather == \"sunny\":\n",
    "    print(\"i will go to ground\")\n",
    "else:\n",
    "    print(\"i will stay in home\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a168391d-dda1-4014-9462-ca0d16d315a5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "975856dd-17bc-4eba-be74-1dc849baae9f",
   "metadata": {},
   "source": [
    "### 7. types of loops with examples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d50ce3ba-0c1f-463e-a015-b87304608b0b",
   "metadata": {},
   "source": [
    "- loops in Python allow you to execute a block of code repeatedly, either for a specific number of times or until a certain condition is met. There are two primary types of loops in Python:\n",
    "\n",
    "- 'for' Loop\n",
    "\n",
    "- 'while' Loop\n",
    "\n",
    "- for Loop:\n",
    "\n",
    "- The for loop is used to iterate over a sequence (such as a list, tuple, dictionary, set, or string) or other iterable objects. It allows you to execute a block of code once for each item in the sequence.\n",
    "\n",
    "- while loop: A while loop in Python is used to repeatedly execute a block of code as long as a specified condition remains True. It is a control flow statement that allows for iterative execution based on a condition. The condition is checked before each iteration, and if it evaluates to True, the code block inside the loop is executed. If the condition becomes False, the loop terminates, and the program continues with the next statement following the loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "41ed0b11-ae2c-4250-aa8e-cb256a2f2b52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "#example for \"for\" loop:\n",
    "for i in range(5):\n",
    "    print(i)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "118e4799-61c2-4b9b-8fc7-ac3cce34c515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "y = 6\n",
    "p = 10\n",
    "while p > y:\n",
    "    print(y)\n",
    "    y = y + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b894b7ae-40bc-4385-b808-30ec739e8a86",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
